@page "/Cars"
@using Microsoft.AspNetCore.Authorization
@using TGU.Data
@inject UserService UserService
@attribute [Authorize(Roles = "Admin, Mechanic")]
@rendermode InteractiveServer

<PageTitle>Registered Cars</PageTitle>

<h3>Registered Cars</h3>

<div class="input-group mb-3">
    <input type="text" @bind="searchTerm" placeholder="Search by VIN, Plate, Make, or Model" class="form-control" />
    <button class="btn btn-primary" @onclick="FilterCars">Search</button>
</div>

@if (filteredCars == null)
{
    <p>Loading...</p>
}
else if (!filteredCars.Any())
{
    <p>No cars available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>VIN</th>
                <th>Plate</th>
                <th>Make</th>
                <th>Model</th>
                <th>Assigned To</th>
                <th>Car Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in filteredCars)
            {
                <tr>
                    <td><NavLink href="@($"/CarDetails/{car.Vin}")">@car.Vin</NavLink></td>
                    <td>@car.Plate</td>
                    <td>@car.Make</td>
                    <td>@car.Model</td>
                    <td>@GetUserFullName(car.AssignedTo)</td>
                    <td>@car.Status</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Car> cars;
    private List<Car> filteredCars;
    private List<ApplicationUser> users;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        // Fetch the data from the UserService
        cars = await UserService.GetAllCarsAsync();
        filteredCars = cars;  // Initially show all cars
        users = await UserService.GetAllUsersAsync();
    }

    // This method will be called when the "Search" button is clicked
    private void FilterCars()
    {
        // Filtering the cars based on the searchTerm
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredCars = cars; // Show all cars if search term is empty
        }
        else
        {
            filteredCars = cars
                .Where(car =>
                    car.Vin.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    car.Plate.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    car.Make.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    car.Model.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        StateHasChanged(); // Ensure the component re-renders after filtering
    }

    private string GetUserFullName(string userEmail)
    {
        var userFullName = "";
        var user = users.FirstOrDefault(u => u.Email == userEmail);
        userFullName = user?.FirstName + " " + user?.LastName;
        return userFullName;
    }
}
