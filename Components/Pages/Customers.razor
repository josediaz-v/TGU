@page "/Customers"
@using Microsoft.AspNetCore.Authorization
@using TGU.Data
@inject UserService UserService
@attribute [Authorize(Roles = "Admin")]

<h3>Customers</h3>

@if (customers == null)
{
    <p>Loading...</p>
}
else if (!customers.Any())
{
    <p>No customers available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone Number</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.PhoneNumber</td>
                    <td>@customer.Email</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //private List<ApplicationUser> cars;
    private List<ApplicationUser> customers;

    protected override async Task OnInitializedAsync()
    {
        //cars = await UserService.GetAllCarsAsync();
        customers = await UserService.GetAllCustomersAsync();
    }

    @*private string GetOwnerFullName(string userEmail)
    {
        var userFullName = "";
        var user = customers.FirstOrDefault(u => u.Email == userEmail);
        userFullName = user?.FirstName + " " + user?.LastName;
        return userFullName;
    }

    private string GetOwnerPhoneNumber(string userEmail)
    {
        var userPhoneNumber = "";
        var user = customers.FirstOrDefault(u => u.Email == userEmail);
        userPhoneNumber = user?.PhoneNumber;
        return userPhoneNumber;
    }

    private string GetMechanicFullName(string mechanicEmail)
    {
        var mechanicFullName = "";
        var user = customers.FirstOrDefault(u => u.Email == mechanicEmail);
        mechanicFullName = user?.FirstName + " " + user?.LastName;
        return mechanicFullName;
    }*@
}